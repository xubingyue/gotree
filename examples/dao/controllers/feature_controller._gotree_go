package controllers

import (
	"examples/dao/sources/api"
	"examples/dao/sources/cache"
	"examples/dao/sources/memory"
	"examples/dao/sources/models/order"
	"examples/protocol/dao_cmd"
	"fmt"
	"time"

	"github.com/8treenet/gotree/dao"
	"github.com/8treenet/gotree/helper"
)

func init() {
	controller := new(FeatureController).Gotree()
	dao.RegisterController(controller)

	//注册队列
	//controlle : controlle 	 传入要绑定的控制器
	//QueueName : "FeatureQueue" 队列名字
	//QueueLen : 1000            队列长度。 队列已满，会触发阻塞调用
	//Goroutine : 1              非必填，消费并发为1
	dao.RegisterQueue(controller, "FeatureQueue", 1000)

	//Goroutine : 5 			//队列消费的并发数
	//dao.RegisterQueue(controller, "FeatureQueue", 1000, 5)
}

type FeatureController struct {
	dao.ComController
}

// Gotree
func (self *FeatureController) Gotree() *FeatureController {
	self.ComController.Gotree(self)
	return self
}

// Prepare
func (self *FeatureController) Prepare(method string, argv interface{}) {
	//日志输出的bseq 全局唯一
	helper.Log().WriteInfo("Prepare:", method, argv)
}

//Finish
func (self *FeatureController) Finish(method string, reply interface{}, e error) {
	helper.Log().WriteInfo("Finish:", method, fmt.Sprint(reply), e)
}

// Course 特性相关教程
func (self *FeatureController) Course(cmd dao_cmd.Course, result *helper.VoidValue) (e error) {
	var (
		cacheCourse  *cache.Course  //redis数据源
		memoryCourse *memory.Course //内存数据源
		geoApi       *api.TaoBaoIp  //http数据源, 第三方接口 or 其他内部系统接口
		mOrder       *order.Order
		mOrderLog    *order.OrderLog
	)
	//服务定位器 获取实体对象
	self.Cache(&cacheCourse)
	self.Memory(&memoryCourse)
	self.Api(&geoApi)
	self.Model(&mOrder)
	self.Model(&mOrderLog)

	//redis写读
	cacheCourse.TestSet(cmd.CourseInt, cmd.CourseString)
	helper.Log().WriteInfo(cacheCourse.TestGet())

	//memory写读
	memoryCourse.TestSet(cmd.CourseInt, cmd.CourseString)
	helper.Log().WriteInfo(memoryCourse.TestGet())

	//http数据
	helper.Log().WriteInfo(geoApi.GetIpInfo("49.87.27.95"))

	//队列处理
	self.Queue("FeatureQueue", func() error {
		time.Sleep(1 * time.Second)
		helper.Log().WriteInfo("FeatureQueue")
		return nil
	})

	//事务
	self.Transaction(func() error {
		id, e := mOrder.Add(1, 1)
		if e != nil {
			return e
		}
		return mOrderLog.Add(id, "add")
	})
	return
}
